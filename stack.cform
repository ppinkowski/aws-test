AWSTemplateFormatVersion: 2010-09-09

Parameters:
  lambdaFunctionName:
    Description: Lambda Function Name
    Type: String
    Default: hello

  apiGatewayStageName:
    Type: 'String'
    AllowedPattern: '^[a-z0-9]+$'
    Default: 'call'

Resources:
  ApiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: HelloApi

  RootMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: GET
      ResourceId: !GetAtt ApiGateway.RootResourceId
      RestApiId: !Ref ApiGateway
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations'
          - { lambdaArn: !GetAtt LambdaFunction.Arn }
  
  ApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - RootMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref apiGatewayStageName

  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: sl-phil-test
        S3Key: src/hello1.zip
      Description: 'Hello World Function'
      FunctionName: !Ref lambdaFunctionName
      Handler: hello.hello
      Role: !GetAtt LambdaIAMRole.Arn
      Runtime: nodejs8.10

  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/'

  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
      Policies:
        - PolicyName: LamndaRole
          PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Action:
                    - 'logs:CreateLogGroup'
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                  Effect: 'Allow'
                  Resource:
                    - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*'

  LambdaLogGroup:
      Type: 'AWS::Logs::LogGroup'
      Properties:
        LogGroupName: !Sub '/aws/lambda/${lambdaFunctionName}'
        RetentionInDays: 1

Outputs:
  ApiGatewayInvokeURL:
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}'

  LambdaArn:
    Value: !GetAtt 'LambdaFunction.Arn'